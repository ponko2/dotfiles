[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_event = 'VimEnter'
hook_add = '''
  set helplang& helplang=ja,en
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
on_event = ["BufReadPre", "BufNewFile"]
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
'''

[[plugins]]
repo = 'mhinz/vim-signify'
on_event = ["BufReadPost", "BufNewFile", "BufWritePre"]
hook_add = '''
  let g:signify_vcs_cmds = #{
        \   git: 'git diff --no-color --no-ext-diff -U0 HEAD -- %f',
        \ }
'''

[[plugins]]
repo = 'rbtnn/vim-ambiwidth'
on_event = ["BufReadPost", "BufNewFile", "BufWritePre"]
hook_add = '''
  let g:ambiwidth_add_list = [
        \   [0x00B7, 0x00B7, 2],
        \   [0x2018, 0x2019, 2],
        \   [0x201c, 0x201d, 2],
        \   [0x2025, 0x2026, 2],
        \ ]
  let g:ambiwidth_cica_enabled = v:false
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
  function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    nmap <buffer> gd <Plug>(lsp-definition)
    nmap <buffer> <F2> <Plug>(lsp-rename)
    inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
  endfunction

  augroup lsp_install
    autocmd!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END

  let g:lsp_diagnostics_enabled = 1
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_text_edit_enabled = 1
  let g:lsp_virtual_text_enabled = 0
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
on_source = 'vim-lsp'
hook_add = '''
  let g:lsp_settings = #{
        \   yaml-language-server: #{
        \     workspace_config: #{
        \       yaml: #{
        \         validate: v:false,
        \         hover: v:true,
        \         completion: v:true,
        \       },
        \     },
        \   },
        \ }
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
on_event = 'VimEnter'
hook_add = '''
  let g:ctrlp_map = '<Leader>ff'
  noremap <Leader>f. <Cmd>CtrlPCurFile<CR>
  noremap <Leader>fb <Cmd>CtrlPBuffer<CR>

  let g:ctrlp_working_path_mode = 'wa'
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
  let g:ctrlp_lazy_update = 1
  let g:ctrlp_prompt_mappings = {
        \   'PrtSelectMove("j")': ['<C-j>', '<C-n>'],
        \   'PrtSelectMove("k")': ['<C-k>', '<C-p>'],
        \   'PrtHistory(-1)':     ['<Down>'],
        \   'PrtHistory(1)':      ['<Up>'],
        \ }
'''

[[plugins]]
repo = 'mattn/ctrlp-matchfuzzy'
on_source = 'ctrlp.vim'
hook_add = '''
  let g:ctrlp_match_func = #{match: 'ctrlp_matchfuzzy#matcher'}
'''

[[plugins]]
repo = 'mattn/ctrlp-ghq'
on_source = 'ctrlp.vim'
hook_add = '''
  noremap <Leader>fr <Cmd>CtrlPGhq<CR>
'''

[[plugins]]
repo = 'dense-analysis/ale'
on_event = ["BufReadPost", "BufNewFile", "BufWritePre"]
hook_source = '''
  let g:ale_echo_msg_format = '[%linter%] %code: %%s [%severity%]'
  let g:ale_fixers = #{
        \   css: ['biome', 'prettier'],
        \   javascript: ['biome', 'eslint', 'prettier'],
        \   javascriptreact: ['biome', 'eslint', 'prettier'],
        \   lua: ['stylua'],
        \   markdown: ['textlint'],
        \   python: ['ruff_format', 'ruff'],
        \   text: ['textlint'],
        \   typescript: ['biome', 'eslint', 'prettier'],
        \   typescriptreact: ['biome', 'eslint', 'prettier'],
        \ }
  let g:ale_fix_on_save = 1
  let g:ale_linters = #{
        \   go: ['golangci-lint'],
        \   javascript: ['biome', 'eslint'],
        \   javascriptreact: ['biome', 'eslint'],
        \   lua: ['luacheck'],
        \   markdown: ['textlint'],
        \   python: ['ruff'],
        \   text: ['textlint'],
        \   typescript: ['biome', 'eslint'],
        \   typescriptreact: ['biome', 'eslint'],
        \ }
  let g:ale_linters_explicit = 1
  let g:ale_sign_column_always = 1

  " Go
  let g:ale_go_golangci_lint_options = ''
  let g:ale_go_golangci_lint_package = 1
'''

[[plugins]]
repo = 'rhysd/vim-lsp-ale'
depends = 'vim-lsp'
on_source = 'ale'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
on_event = 'InsertEnter'
hook_add = '''
  let g:asyncomplete_popup_delay = 200
  let g:asyncomplete_auto_completeopt = 0
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = 'vim-lsp'
on_source = 'asyncomplete.vim'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
depends = 'vim-lsp'
on_source = 'vim-vsnip'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = {xn = '<Plug>(EasyAlign)'}
hook_add = '''
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = {x = '<Plug>'}
hook_add = '''
  xmap p <Plug>(operator-replace)
'''

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
on_map = {n = '<Plug>'}
hook_add = '''
  let g:splitjoin_join_mapping = ''
  let g:splitjoin_split_mapping = ''
  nmap <Leader>j :SplitjoinJoin<CR>
  nmap <Leader>s :SplitjoinSplit<CR>
'''

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap j <Plug>(accelerated_jk_gj)
  nmap k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
on_event = 'VimEnter'
hook_add = '''
  let g:operator_sandwich_no_default_key_mappings = 1
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-surround'
depends = 'vim-repeat'
on_event = 'VimEnter'

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = {nvo = '<Plug>(asterisk-'}
hook_add = '''
  map *   <Plug>(asterisk-*)
  map #   <Plug>(asterisk-#)
  map g*  <Plug>(asterisk-g*)
  map g#  <Plug>(asterisk-g#)
  map z*  <Plug>(asterisk-z*)
  map gz* <Plug>(asterisk-gz*)
  map z#  <Plug>(asterisk-z#)
  map gz# <Plug>(asterisk-gz#)
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_event = 'InsertEnter'
hook_source = '''
  let g:user_emmet_settings = #{variables: #{lang: 'ja'}}
'''

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'
hook_add = '''
  let g:markdown_fenced_languages = [
        \   'diff',
        \   'javascript',
        \   'json',
        \   'python',
        \   'sh',
        \   'sql',
        \   'typescript',
        \ ]
'''

[[plugins]]
repo = 'mattn/vim-maketable'
on_ft = 'markdown'

[[plugins]]
repo = 'mattn/vim-goaddtags'
on_ft = 'go'

[[plugins]]
repo = 'mattn/vim-godoc'
on_ft = 'go'

[[plugins]]
repo = 'mattn/vim-goimpl'
on_ft = 'go'

[[plugins]]
repo = 'mattn/vim-goimports'
on_ft = 'go'

[[plugins]]
repo = 'mattn/vim-gorename'
on_ft = 'go'

[[plugins]]
repo = 'mattn/vim-gorun'
on_ft = 'go'
