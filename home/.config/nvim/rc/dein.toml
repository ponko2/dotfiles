[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'ciaranm/securemodelines'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-tabpagecd'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'thinca/vim-textobj-between'

[[plugins]]
repo = 'kana/vim-textobj-function'

[[plugins]]
repo = 'haya14busa/vim-textobj-function-syntax'

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'

[[plugins]]
repo = 'vim-jp/autofmt'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'thinca/vim-zenspace'

[[plugins]]
repo = 'morhetz/gruvbox'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
  let g:polyglot_disabled = [
        \   'csv',
        \   'go',
        \   'jsx',
        \   'markdown',
        \ ]
  let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
  let g:asyncomplete_popup_delay = 200
  let g:asyncomplete_auto_completeopt = 0
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
  function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    nmap <buffer> gd <Plug>(lsp-definition)
    nmap <buffer> <F2> <Plug>(lsp-rename)
    inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
  endfunction

  augroup lsp_install
    autocmd!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END

  let g:lsp_diagnostics_enabled = 1
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_text_edit_enabled = 1
  let g:lsp_virtual_text_enabled = 0
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_diff_base = 'HEAD'
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
if = "has('gui_running')"
hook_add = '''
  noremap <silent> <Leader>. :<C-u>CtrlPCurFile<CR>
  noremap <silent> <Leader><Tab> :<C-u>CtrlPBuffer<CR>

  let g:ctrlp_working_path_mode = 'wa'
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
  let g:ctrlp_prompt_mappings = {
        \   'PrtSelectMove("j")': ['<C-j>', '<C-n>'],
        \   'PrtSelectMove("k")': ['<C-k>', '<C-p>'],
        \   'PrtHistory(-1)':     ['<Down>'],
        \   'PrtHistory(1)':      ['<Up>'],
        \ }
'''

[[plugins]]
repo = 'mattn/ctrlp-ghq'
if = "has('gui_running')"
depends = 'ctrlp.vim'
hook_add = '''
  noremap <Leader><C-p> :<C-u>CtrlPGhq<CR>
'''

[[plugins]]
repo = 'junegunn/fzf'
if = "!has('gui_running')"

[[plugins]]
repo = 'junegunn/fzf.vim'
if = "!has('gui_running')"
depends = 'fzf'
hook_add = '''
  noremap <silent> <C-p> :<C-u>execute
        \ systemlist('git rev-parse --is-inside-work-tree')[0] ==# 'true'
        \ ? 'GFiles' : 'Files' getcwd()<CR>
  noremap <silent> <Leader>. :<C-u>execute
        \ systemlist('git rev-parse --is-inside-work-tree')[0] ==# 'true'
        \ ? 'GFiles' : 'Files' expand('%:p:h')<CR>
  noremap <silent> <Leader><C-p> :<C-u>call fzf#run(fzf#wrap({
        \   'source': 'ghq list --full-path',
        \   'sink': 'lcd'
        \ }))<CR>
  noremap <silent> <Leader><Tab> :<C-u>Buffers<CR>

  let g:fzf_preview_window = ''
'''
