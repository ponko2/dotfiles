[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = 'denite.nvim'
hook_add = '''
  nnoremap <silent> <Leader>j :<C-u>Denite junkfile:new junkfile
        \ -default-action=split<CR>
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_ft = 'snippet'
on_event = 'InsertEnter'
hook_source = 'call vimrc#source_rc("plugins/neosnippet.rc.vim")'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = 'call vimrc#source_rc("plugins/denite.rc.vim")'
hook_add = '''
  nnoremap <silent> <C-p> :<C-u>Denite file/point file/old
        \ `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`<CR>

  nnoremap <silent> <Leader>. :<C-u>DeniteBufferDir
        \ `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`<CR>

  nnoremap <silent> <Leader><Tab> :<C-u>Denite buffer<CR>

  nnoremap <silent> <Leader>/ :<C-u>Denite -buffer-name=search -no-empty -mode=normal grep::!<CR>
  nnoremap <silent> <Leader>n :<C-u>Denite -buffer-name=search -resume -mode=normal -refresh<CR>
  nnoremap <silent> <Leader>p :<C-u>Denite -buffer-name=register register neoyank<CR>
  xnoremap <silent> <Leader>p :<C-u>Denite -buffer-name=register -default-action=replace register neoyank<CR>
  nnoremap <silent> <Leader>; :<C-u>Denite -unique -mode=normal change jump<CR>
'''

[[plugins]]
repo = 'raghur/fruzzy'
on_source = 'denite.nvim'
hook_post_update = '''
  call fruzzy#install()
'''
hook_add = '''
  let g:fruzzy#usenative = 1
  let g:fruzzy#sortonempty = 1
'''

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'
hook_add = '''
  nnoremap <silent> <Leader><C-p> :<C-u>Denite -default-action=cd ghq<CR>
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
hook_add = '''
  nnoremap <silent> <Leader>f :<C-u>Defx `expand('%:p:h')`
          \ -split=vertical -winwidth=50 -direction=topleft
          \ -search=`expand('%:p')`<CR>
  nnoremap <silent> <Leader>F :<C-u>Defx
          \ -listed -resume -buffer-name=tab`tabpagenr()`<CR>
'''
hook_source = '''
  call defx#custom#column('icon', {
          \   'directory_icon': '▸',
          \   'opened_icon': '▾',
          \   'root_icon': ' ',
          \ })

  call defx#custom#column('mark', {
          \   'readonly_icon': '✗',
          \   'selected_icon': '✓',
          \ })
'''
[plugins.ftplugin]
defx = '''
  " Define mappings
  nnoremap <silent><buffer><expr> <CR> defx#async_action('drop')
  nnoremap <silent><buffer><expr> c defx#do_action('copy')
  nnoremap <silent><buffer><expr> m defx#do_action('move')
  nnoremap <silent><buffer><expr> p defx#do_action('paste')
  nnoremap <silent><buffer><expr> l defx#async_action('open')
  nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> o defx#async_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> O defx#async_action('open_tree_recursive')
  nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:filename:type:size:time')
  nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d defx#do_action('remove')
  nnoremap <silent><buffer><expr> r defx#do_action('rename')
  nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
  nnoremap <silent><buffer><expr> \ defx#do_action('cd', getcwd())
  nnoremap <silent><buffer><expr> q defx#do_action('quit')
  nnoremap <silent><buffer><nowait><expr> <Space> defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
  nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
  nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ?
        \ ':<C-u>wincmd w<CR>' :
        \ ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
on_source = 'denite.nvim'
hook_add = '''
  nnoremap <silent> <Leader>s :<C-u>Deol zsh -split<CR>
  nnoremap <silent> <Leader>S :<C-u>Deol zsh<CR>
  " nnoremap <silent> <Leader>S :<C-u>call deol#new({'command': 'zsh'})<CR>
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = {xn = '<Plug>(EasyAlign)'}
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)

  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {x = '<Plug>'}
hook_add = '''
  xmap I <Plug>(niceblock-I)
  xmap A <Plug>(niceblock-A)
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = {x = '<Plug>'}
hook_add = '''
  xmap p <Plug>(operator-replace)
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {nv = '<Plug>'}
hook_add = '''
  nmap J <Plug>(jplus)
  vmap J <Plug>(jplus)
  nmap <Leader>J <Plug>(jplus-input)
  vmap <Leader>J <Plug>(jplus-input)
'''

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent> j <Plug>(accelerated_jk_gj)
  nmap <silent> k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = '<Plug>(operator-surround-'
hook_add = '''
  map <silent> sa <Plug>(operator-surround-append)
  map <silent> sd <Plug>(operator-surround-delete)
  map <silent> sr <Plug>(operator-surround-replace)
'''

[[plugins]]
repo = 'thinca/vim-visualstar'
on_map = {v = '<Plug>(visualstar-'}
hook_add = '''
  vmap *  <Plug>(visualstar-*)zvzz
  vmap #  <Plug>(visualstar-#)zvzz
  vmap g* <Plug>(visualstar-g*)zvzz
  vmap g# <Plug>(visualstar-g#)zvzz
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_event = 'InsertEnter'
hook_source = '''
  let g:user_emmet_settings = {
        \   'variables': {
        \     'lang': 'ja',
        \   },
        \ }
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_source = '''
  let g:go_def_mode = 'gopls'
  let g:go_info_mode = 'gopls'

  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_types = 1
  let g:go_highlight_build_constraints = 1
  let g:go_highlight_generate_tags = 1

  let g:go_auto_sameids = 1
  let g:go_auto_type_info = 0

  let g:go_fmt_command = 'gofmt'
  let g:go_fmt_fail_silently = 1
  let g:go_fmt_options = {
        \   'gofmt': '-s',
        \   'goimports': '',
        \ }

  let g:go_snippet_engine = "neosnippet"

  let g:go_gocode_unimported_packages = 1

  let g:go_metalinter_enabled = [
        \   'deadcode',
        \   'dupl',
        \   'errcheck',
        \   'gas',
        \   'goconst',
        \   'gocyclo',
        \   'golint',
        \   'gosimple',
        \   'gotype',
        \   'gotypex',
        \   'ineffassign',
        \   'interfacer',
        \   'maligned',
        \   'megacheck',
        \   'staticcheck',
        \   'structcheck',
        \   'unconvert',
        \   'varcheck',
        \   'vet',
        \   'vetshadow',
        \ ]
'''
[plugins.ftplugin]
go = '''
  " run :GoBuild or :GoTestCompile based on the go file
  function! s:build_go_files()
    let l:file = expand('%')
    if l:file =~# '^\f\+_test\.go$'
      call go#test#Test(0, 1)
    elseif l:file =~# '^\f\+\.go$'
      call go#cmd#Build(0)
    endif
  endfunction

  nmap <buffer> K <Plug>(go-info)
  nmap <buffer> <F2> <Plug>(go-rename)
  nmap <buffer> <C-g> :<C-u>Denite decls<CR>
  imap <buffer> <C-g> <ESC>:<C-u>Denite decls<CR>

  nmap <buffer> <Leader>i <Plug>(go-imports)

  nmap <buffer> <Leader>A <Plug>(go-alternate-edit)
  nmap <buffer> <Leader>B :<C-u>call <SID>build_go_files()<CR>
  nmap <buffer> <Leader>C <Plug>(go-coverage-toggle)
  nmap <buffer> <Leader>I <Plug>(go-install)
  nmap <buffer> <Leader>L <Plug>(go-metalinter)
  nmap <buffer> <Leader>R <Plug>(go-run)
  nmap <buffer> <Leader>S <Plug>(go-def-split)
  nmap <buffer> <Leader>T <Plug>(go-test)
  nmap <buffer> <Leader>V <Plug>(go-def-vertical)

  command! -buffer -bang A call go#alternate#Switch(<bang>0, 'edit')
  command! -buffer -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
  command! -buffer -bang AS call go#alternate#Switch(<bang>0, 'split')
  command! -buffer -bang AT call go#alternate#Switch(<bang>0, 'tabe')
'''

[[plugins]]
repo = 'w0rp/ale'
on_event = 'BufRead'
hook_source = '''
  let g:ale_disable_lsp = 1
  let g:ale_sign_column_always = 1
  let g:ale_sign_error = '✖'
  let g:ale_sign_warning = '⚠'
  let g:ale_echo_msg_format = '[%linter%] %code: %%s [%severity%]'
  let g:ale_virtualtext_cursor = 1
  let g:ale_fix_on_save = 1
'''
[plugins.ftplugin]
go = '''
  let b:ale_linters = ['golangci-lint']
  let b:ale_go_golangci_lint_options = ''
  let b:ale_go_golangci_lint_package = 1
'''
java = '''
  let b:ale_linters = []
'''
javascript = '''
  let b:ale_linters = ['eslint']
  let b:ale_fixers = ['eslint']
'''
vue = '''
  let b:ale_linter_aliases = ['javascript', 'vue']
  let b:ale_linters = ['eslint', 'vls']
  let b:ale_fixers = ['eslint']
'''
css = '''
  let b:ale_fixers = ['prettier']
'''
scss = '''
  let b:ale_fixers = ['prettier']
'''
less = '''
  let b:ale_fixers = ['prettier']
'''
yaml = '''
  let b:ale_fixers = ['prettier']
'''
html = '''
  let b:ale_linters = []
'''
text = '''
  let b:ale_linters = ['textlint']
  let b:ale_fixers = ['textlint']
'''
markdown = '''
  let b:ale_linters = ['textlint']
  let b:ale_fixers = ['textlint']
'''

[[plugins]]
repo = 'iyuuya/denite-ale'
depends = 'ale'
on_source = 'denite.nvim'
hook_add = '''
  nnoremap <silent> <Leader>l :<C-u>Denite -no-empty ale<CR>
'''

[[plugins]]
repo = 'ciaranm/securemodelines'
on_event = 'BufRead'

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'
hook_add = '''
  let g:gfm_syntax_emoji_conceal = 1
  let g:markdown_fenced_languages = ['java', 'javascript', 'json', 'sh', 'sql']
'''

# [[plugins]]
# repo = 'Shougo/neoinclude.vim'

# [[plugins]]
# repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'ujihisa/neco-look'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'tbodt/deoplete-tabnine'
on_event = 'InsertEnter'
build = './install.sh'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = 'call vimrc#source_rc("plugins/deoplete.rc.vim")'
