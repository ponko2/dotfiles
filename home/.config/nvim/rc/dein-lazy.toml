[[plugins]]
repo = 'LeafCage/foldCC'
on_ft = 'vim'
hook_add = '''
  let g:foldCCtext_enable_autofdc_adjuster = 1
  set foldtext=FoldCCtext()
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = 'denite.nvim'
hook_add = '''
  nnoremap <silent> <Leader>j :<C-u>Denite junkfile:new junkfile
        \ -default-action=split<CR>
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_if = 1

[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = 'context_filetype.vim'
if = "has('lua')"
on_i = 1
hook_source = 'source $XDG_CONFIG_HOME/nvim/rc/plugins/neocomplete.rc.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = 'source $XDG_CONFIG_HOME/nvim/rc/plugins/neosnippet.rc.vim'

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
hook_source = 'source $XDG_CONFIG_HOME/nvim/rc/plugins/unite.rc.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = 'source $XDG_CONFIG_HOME/nvim/rc/plugins/denite.rc.vim'
hook_add = '''
  nnoremap <silent> <C-p> :<C-u>Denite file_point file_old
        \ `executable('git') && finddir('.git', ';') != '' ? 'file_rec/git' : 'file_rec'`<CR>

  nnoremap <silent> <Leader><Tab> :<C-u>Denite buffer<CR>

  nnoremap <silent> <Leader>/ :<C-u>Denite -buffer-name=search -no-empty -mode=normal grep<CR>
  nnoremap <silent> <Leader>n :<C-u>Denite -buffer-name=search -resume -mode=normal -refresh<CR>
  nnoremap <silent> <Leader>p :<C-u>Denite -buffer-name=register register neoyank<CR>
  xnoremap <silent> <Leader>p :<C-u>Denite -buffer-name=register -default-action=replace register neoyank<CR>
  nnoremap <silent> <Leader>; :<C-u>Denite -mode=normal change jump<CR>
'''

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'
hook_add = '''
  nnoremap <silent> <Leader><C-p> :<C-u>Denite ghq<CR>
'''

[[plugins]]
repo = 'chemzqm/denite-git'
depends = 'vim-easygit'
on_source = 'denite.nvim'
hook_add = '''
  nnoremap <silent> <Leader>gs :<C-u>Denite gitstatus<CR>
'''

[[plugins]]
repo = 'chemzqm/vim-easygit'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_map = {n = '<Plug>'}
on_if = "isdirectory(bufname('%'))"
hook_source = 'source $XDG_CONFIG_HOME/nvim/rc/plugins/vimfiler.rc.vim'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = {xn = '<Plug>(EasyAlign)'}
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)

  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
hook_add = '''
  nnoremap <silent> <Leader>gS :<C-u>Gina status<CR>
  nnoremap <silent> <Leader>gc :<C-u>Gina commit<CR>
'''

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {x = '<Plug>'}
hook_add = '''
  xmap I <Plug>(niceblock-I)
  xmap A <Plug>(niceblock-A)
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = {x = '<Plug>'}
hook_add = '''
  xmap p <Plug>(operator-replace)
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {nv = '<Plug>'}
hook_add = '''
  nmap J <Plug>(jplus)
  vmap J <Plug>(jplus)
  nmap <Leader>J <Plug>(jplus-input)
  vmap <Leader>J <Plug>(jplus-input)
'''

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = '<Plug>(operator-surround-'
hook_add = '''
  map <silent>sa <Plug>(operator-surround-append)
  map <silent>sd <Plug>(operator-surround-delete)
  map <silent>sr <Plug>(operator-surround-replace)
'''

[[plugins]]
repo = 'thinca/vim-visualstar'
on_map = '<Plug>(visualstar-'
hook_add = '''
  vmap *  <Plug>(visualstar-*)zv
  vmap #  <Plug>(visualstar-#)zv
  vmap g* <Plug>(visualstar-g*)zv
  vmap g# <Plug>(visualstar-g#)zv
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'php', 'css', 'scss']
hook_add = '''
  let g:user_emmet_install_global = 0
  let g:user_emmet_settings = {
        \   'jsp' : {
        \     'extends' : 'html',
        \     'filters' : 'c',
        \   },
        \   'php' : {
        \     'extends' : 'html',
        \     'filters' : 'c',
        \   },
        \ }
  autocmd MyAutoCmd FileType html,xhtml,jsp,asp,php,css,scss EmmetInstall
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_if = "executable('git') && finddir('.git', ';') != ''"
hook_add = '''
  let g:gitgutter_diff_args = 'HEAD'
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_types = 1
  let g:go_highlight_build_constraints = 1

  let g:go_auto_type_info = 0
  let g:go_fmt_command = 'gofmt'
  let g:go_fmt_options = '-s'
  let g:go_gocode_unimported_packages = 1
  let g:go_metalinter_autosave = 1

  let g:go_metalinter_enabled = [
        \   'aligncheck',
        \   'deadcode',
        \   'dupl',
        \   'errcheck',
        \   'gas',
        \   'goconst',
        \   'gocyclo',
        \   'golint',
        \   'gosimple',
        \   'gotype',
        \   'ineffassign',
        \   'interfacer',
        \   'staticcheck',
        \   'structcheck',
        \   'unconvert',
        \   'varcheck',
        \   'vet',
        \   'vetshadow',
        \ ]

  let g:go_metalinter_autosave_enabled = [
        \   'golint',
        \   'gosimple',
        \   'staticcheck',
        \   'vet',
        \ ]

  autocmd MyAutoCmd FileType go nmap <Leader>B <Plug>(go-build)
  autocmd MyAutoCmd FileType go nmap <Leader>C <Plug>(go-coverage-toggle)
  autocmd MyAutoCmd FileType go nmap <Leader>D <Plug>(go-doc)
  autocmd MyAutoCmd FileType go nmap <Leader>E <Plug>(go-rename)
  autocmd MyAutoCmd FileType go nmap <Leader>I <Plug>(go-implements)
  autocmd MyAutoCmd FileType go nmap <Leader>R <Plug>(go-run)
  autocmd MyAutoCmd FileType go nmap <Leader>T <Plug>(go-test)
  autocmd MyAutoCmd FileType go nmap <Leader><C-g> <Plug>(go-info)
'''

[[plugins]]
repo = 'jodosha/vim-godebug'
on_ft = 'go'

[[plugins]]
repo = 'sbdchd/neoformat'
on_if = 1

[[plugins]]
repo = 'neomake/neomake'
on_if = 1

[[plugins]]
repo = 'w0rp/ale'
on_if = 1
hook_add = '''
  let g:ale_sign_column_always = 1
  let g:ale_sign_error = '✖'
  let g:ale_sign_warning = '⚠'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

  let g:ale_linters = {
        \   'go': [],
        \   'html': [],
        \   'javascript': ['eslint'],
        \ }
'''

[[plugins]]
repo = 'ciaranm/securemodelines'
on_event = 'BufRead'

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_event = 'BufRead'
