[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
  function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    nmap <buffer> gd <Plug>(lsp-definition)
    nmap <buffer> <F2> <Plug>(lsp-rename)
    inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
  endfunction

  augroup lsp_install
    autocmd!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END

  let g:lsp_diagnostics_enabled = 1
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_text_edit_enabled = 1
  let g:lsp_virtual_text_enabled = 0
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
on_source = 'vim-lsp'
hook_add = '''
  let g:lsp_settings = #{
        \   yaml-language-server: #{
        \     workspace_config: #{
        \       yaml: #{
        \         validate: v:false,
        \         hover: v:true,
        \         completion: v:true,
        \       },
        \     },
        \   },
        \ }
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
on_event = 'VimEnter'
hook_add = '''
  noremap <Leader>. <Cmd>CtrlPCurFile<CR>
  noremap <Leader><Tab> <Cmd>CtrlPBuffer<CR>

  let g:ctrlp_working_path_mode = 'wa'
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
  let g:ctrlp_lazy_update = 1
  let g:ctrlp_prompt_mappings = {
        \   'PrtSelectMove("j")': ['<C-j>', '<C-n>'],
        \   'PrtSelectMove("k")': ['<C-k>', '<C-p>'],
        \   'PrtHistory(-1)':     ['<Down>'],
        \   'PrtHistory(1)':      ['<Up>'],
        \ }
'''

[[plugins]]
repo = 'mattn/ctrlp-matchfuzzy'
on_source = 'ctrlp.vim'
hook_add = '''
  let g:ctrlp_match_func = #{match: 'ctrlp_matchfuzzy#matcher'}
'''

[[plugins]]
repo = 'mattn/ctrlp-ghq'
on_source = 'ctrlp.vim'
hook_add = '''
  noremap <Leader><C-p> <Cmd>CtrlPGhq<CR>
'''

[[plugins]]
repo = 'dense-analysis/ale'
on_event = 'VimEnter'
hook_source = '''
  let g:ale_disable_lsp = 1
  let g:ale_sign_column_always = 1
  let g:ale_echo_msg_format = '[%linter%] %code: %%s [%severity%]'
  let g:ale_virtualtext_cursor = 'disabled'
  let g:ale_fix_on_save = 1
'''
[plugins.ftplugin]
go = '''
  let b:ale_linters = ['golangci-lint']
  let b:ale_go_golangci_lint_options = ''
  let b:ale_go_golangci_lint_package = 1
'''
javascript = '''
  let b:ale_linters = ['eslint']
  let b:ale_fixers = ['eslint', 'prettier']
'''
javascriptreact = '''
  let b:ale_linters = ['eslint']
  let b:ale_fixers = ['eslint', 'prettier']
'''
typescript = '''
  let b:ale_linters = ['eslint']
  let b:ale_fixers = ['eslint', 'prettier']
'''
typescriptreact = '''
  let b:ale_linters = ['eslint']
  let b:ale_fixers = ['eslint', 'prettier']
'''
css = '''
  let b:ale_fixers = ['prettier']
'''
scss = '''
  let b:ale_fixers = ['prettier']
'''
html = '''
  let b:ale_linters = []
'''
text = '''
  let b:ale_linters = ['textlint']
'''
markdown = '''
  let b:ale_linters = ['textlint']
'''

[[plugins]]
repo = 'rhysd/vim-lsp-ale'
depends = 'vim-lsp'
on_source = 'ale'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
on_event = 'InsertEnter'
hook_add = '''
  let g:asyncomplete_popup_delay = 200
  let g:asyncomplete_auto_completeopt = 0
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = 'vim-lsp'
on_source = 'asyncomplete.vim'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
depends = 'vim-lsp'
on_source = 'vim-vsnip'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = {xn = '<Plug>(EasyAlign)'}
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)

  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {x = '<Plug>'}
hook_add = '''
  xmap I <Plug>(niceblock-I)
  xmap A <Plug>(niceblock-A)
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = {x = '<Plug>'}
hook_add = '''
  xmap p <Plug>(operator-replace)
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {nv = '<Plug>'}
hook_add = '''
  nmap J <Plug>(jplus)
  vmap J <Plug>(jplus)
  nmap <Leader>J <Plug>(jplus-input)
  vmap <Leader>J <Plug>(jplus-input)
'''

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent> j <Plug>(accelerated_jk_gj)
  nmap <silent> k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = '<Plug>(operator-surround-'
hook_add = '''
  map <silent> sa <Plug>(operator-surround-append)
  map <silent> sd <Plug>(operator-surround-delete)
  map <silent> sr <Plug>(operator-surround-replace)
'''

[[plugins]]
repo = 'thinca/vim-visualstar'
on_map = {v = '<Plug>(visualstar-'}
hook_add = '''
  vmap *  <Plug>(visualstar-*)zvzz
  vmap #  <Plug>(visualstar-#)zvzz
  vmap g* <Plug>(visualstar-g*)zvzz
  vmap g# <Plug>(visualstar-g#)zvzz
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_event = 'InsertEnter'
hook_source = '''
  let g:user_emmet_settings = #{variables: #{lang: 'ja'}}
'''

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'
hook_add = '''
  let g:markdown_fenced_languages = ['javascript', 'json', 'sh', 'sql', 'diff']
'''

[[plugins]]
repo = 'mattn/vim-maketable'
on_ft = 'markdown'

[[plugins]]
repo = 'mattn/vim-goaddtags'
on_ft = 'go'

[[plugins]]
repo = 'mattn/vim-godoc'
on_ft = 'go'

[[plugins]]
repo = 'mattn/vim-goimpl'
on_ft = 'go'

[[plugins]]
repo = 'mattn/vim-goimports'
on_ft = 'go'

[[plugins]]
repo = 'mattn/vim-gorename'
on_ft = 'go'

[[plugins]]
repo = 'mattn/vim-gorun'
on_ft = 'go'
